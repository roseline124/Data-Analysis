x.mean <- mean(x)
x.sd <- sd(x)
# (1) 0.4012937
pnorm(18, mean = x.mean , sd=x.sd)
# (2) 0.3538302
1 - pnorm(23, mean = x.mean , sd=x.sd)
# (2) 0.3538302
1 - pnorm(23, mean = x.mean , sd=x.sd)
# (3) 0.1484446
p_21 <- 1 - pnorm(21, mean = x.mean , sd=x.sd)
p_18 <- 1 - pnorm(18, mean = x.mean , sd=x.sd)
p_18 - p_21
# 3.
x<-rnorm(25, 168, 5)
x.sd <- sd(x)
x.sd
y <- rnorm(100,168, 5)
y.sd <- sd(y)
y.sd
x.sd <- 18/6
x.sd
pnorm(34, 36, 3)
p_34 <- pnorm(34, 36, 3)
p_43 <- pnorm(43, 36, 3)
p_43
1 - p_43
p_34 <- pnorm(34, 36, 3)
p_43 <- 1 - pnorm(43, 36, 3)
1- (p_34 + p_43)
p_34 <- pnorm(34, 36, 3)
p_43 <- 1 - pnorm(43, 36, 3)
1- (p_34 + p_43)
p_34
p_43 <- 1 - pnorm(43, 36, 3)
p_43
1- (p_34 + p_43)
p_34 <- pnorm(34, 40, 3)
p_34
p_43 <- 1 - pnorm(43, 40, 3)
p_43
1- (p_34 + p_43)
# 4. 0.8185
x.mean <- 40
x.sd <- 18/6
x.sd
p_34 <- pnorm(34, x.mean, x.sd)
p_34
p_43 <- 1 - pnorm(43, x.mean, x.sd)
p_43
1- (p_34 + p_43)
# 5.
x <- pnorm(940, 900, 40)
x
# (2)
y <- 1- pnorm(905, 900, 40)
y
y <- 1- pnorm(905, 900, 4)
y
qchisq(0.05, 4)
qchisq(0.1, 9)
dchisq(0.05, 4)
1 - dchisq(0.05, 4)
qchisq(0.0025, 4)
1 - qchisq(0.0025, 4)
qchisq(0.0025, 4)
qchisq(0.05, 4)
qchisq(0.025, 4)
qchisq(0.05, 4)
qchisq(0.995, 4)
qchisq(0.975, 4)
qchisq(0.207, 4)
qchisq(0.1, 4)
qchisq(7.7794, 4)
0.1
qchisq(0.1, 4)
dchisq(0.1, 4)
qchisq(dchisq(0.1, 4), 4)
qchisq(0.995, 4)
qchisq(0.005, 4)
qchisq(0.025, 4)
qchisq(0.995, 4)
qchisq(0.95, 4)
qchisq(0.95, 4)
qchisq(0.90, 9)
qchisq(0.975, 16)
qchisq(0.99, 8)
qchisq(0.025, 16)
qchisq(0.01, 8)
dchisq(7.4338, 20)
# (2)
dchisq(31.4104, 20)
# (3)
dchisq(9.5908, 20)
# (2) 0.01210365
1- dchisq(31.4104, 20)
# (3)
p_95 <- dchisq(9.5908, 20)
p_95
dchisq(28.4120, 20)
plot(dchisq(28.4120, 20))
dchisq(28.4120, 20)
p_95
dchisq(28.4120, 20)
p_28 <- dchisq(28.4120, 20)
p_28 - p_95
dchisq(x = 7.4338, 20)
# (2) 0.01210365
dchisq(31.4104, 20)
qchisq(0.01210365, 20)
qchisq(0.01210, 20)
# (2) 0.01210365
dchisq(31.4104, 20)
qchisq(0.01210, 20)
# (2) 0.01210365
dchisq(31.4104, 20) # 0.05
p_28 <- dchisq(28.4120, 20) # 0.9
p_28
# (3) 0.75
p_95 <- dchisq(9.5908, 20) # 0.025
p_95
df<- c(32, 37, 38, 30, 42, 35, 26, 28, 36, 33, 27, 25)
df <- c(32, 37, 38, 30, 42, 35, 26, 28, 36, 33, 27, 25)
df
data.frame(df)
df$region <- data.frame(df)
df <- data.frame(df)
df
df <- c(32, 37, 38, 30, 42, 35, 26, 28, 36, 33, 27, 25)
table(df)
df <- data.frame(df)
df
summarize(df)
summary(df)
str(df)
getMode(df)
getMode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
getMode(df)
getMode(df)
getMode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
getMode(df)
stem(df)
stem(df)
getMode(df)
costs <- c(91, 78, 93, 57, 75, 52, 99, 80, 97, 62,
71, 69, 72, 89, 66, 75, 79, 75, 72, 76,
104, 74, 62, 68, 97, 105, 77, 65, 80, 109,
85, 97, 88, 68, 83, 68, 71, 69, 67, 74,
62, 82, 98, 101, 79, 105, 79, 69, 62, 73)
df <- data.frame(costs)
getMode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
getMode(df$costs)
getMode(df)
df <- c(32, 37, 38, 30, 42, 35, 26, 28, 36, 33, 27, 25)
df <- data.frame(df)
getMode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
getMode(df)
getMode(df$df)
df <- c(32, 37, 38, 30, 42, 35, 26, 28, 36, 33, 27, 25)
region <- data.frame(df)
df
region
region <- c(32, 37, 38, 30, 42, 35, 26, 28, 36, 33, 27, 25)
df <- data.frame(region)
df
getMode(df$region)
summary(df)
region <- c(32, 37, 38, 30, 42, 35, 26, 28, 36, 33, 27, 25)
df <- data.frame(region)
df
# 평균, 중앙값
summary(df)
# 최빈값 함수
getMode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
# 최빈값
getMode(df$region)
var(df$region)
sd(df$region)
boxplot(df$region)
quantile(df$region)
IQR(df$region)
quantile(df$region)
# Calculating IQR
sort(df$region)
q <- quantile(df$region)
q
q[4] - q[2]
iqr <- IQR(df$region)
iqr
# Calculating IQR
iqr <- IQR(df$region)
iqr
1.5*iqr
quantile(df$region)
quantile(df$region)
1.5*iqr
1.5*iqr + 32.5
32.5 - 12.75
32.5 - 8.5
8.5+ 32.5
knitr::opts_chunk$set(echo = TRUE)
1.5*iqr
quantile(df$region)
iqr <- IQR(df$region)
iqr
1.5*iqr
boxplot(df$region)$stats
dnorm(x=4400, mean=4000,sd=200)
dnorm(x=110, mean=100, sd=6)
dnorm(x=110, mean=100, sd=36)
pnorm(x=110, mean=100, sd=36)
pnorm(x=4400, mean=4000,sd=200)
pnorm(q=4400, mean=4000,sd=200)
1- pnorm(q=4400, mean=4000,sd=200)
1- pnorm(q=110, mean=100, sd=36)
1- pnorm(q=110, mean=100, sd=6)
1- pnorm(q=4400, mean=4000,sd=200)
1- pnorm(q=4400, mean=4000,sd=200)
qnorm(x=4400, mean=4000, sd=200)
dnorm(x=4400, mean=4000, sd=200)
1- pnorm(q=4400, mean=4000,sd=200) + dnorm(x=4400, mean=4000, sd=200)
1-0.9772
1- pnorm(q=4400, mean=4000,sd=200)
alpha <- 0.05
sigma <- 5
n <- 100
alpha <- 0.05
sigma/sqrt(n)
se <- sigma/sqrt(n)
qnorm(alpha/2, lower.tail = F)*se
error <- qnorm(alpha/2, lower.tail = F)*se
error
error <- 1- qnorm(alpha/2, lower.tail = F)*se
error
lower <- round(35-error, digits=3)
lower
upper <- round(35+error, digits=3)
upper
c(lower, upper)
qnorm(alpha/2, lower.tail = F)
alpha/2
error <- qnorm(alpha/2, lower.tail = F)*se
error
se <- sigma/sqrt(n)
qnorm(alpha/2, lower.tail = F)
qnorm(alpha/2, lower.tail = F)*se
error <- qnorm(alpha/2, lower.tail = F)*se
error
lower <- round(35-error, digits=3)
lower
upper <- round(35+error, digits=3)
upper
c(lower, upper)
se <- sigma/sqrt(n)
qnorm(alpha/2, lower.tail = F)*se
error <- qnorm(alpha/2, lower.tail = F)*se
error
lower <- round(35-error, digits=3)
lower
upper <- round(35+error, digits=3)
upper
c(lower, upper)
qnorm(alpha/2, lower.tail = F)
se <- sd(5)/sqrt(16)
se
male <- c(11, 17, 14, 10, 13, 11, 17, 10, 19, 14)
female <- c(10, 13, 12, 15, 18, 14, 14, 17, 17, 10)
df <- data.frame(male, female)
df
hist(df$male)
hist(df$female)
hist(df$female, prob=T)
hist(df$male, prob=T)
qqnorm(df$male)
qqline(df$male)
qqline(df$male, col="red")
outlier(df$male)
t.test(df$male, df$female, var.equal = T)
shapiro.test(df)
shapiro.test(df$male)
shapiro.test(df$female)
qqnorm(df$male)
qqline(df$male, col="red")
hist(df$male, prob=T)
hist(df$female)
qqnorm(df$male)
qqline(df$male, col="red")
qqnorm(df$female)
qqline(df$female, col="red")
t.test(df$male, df$female, var.equal = T)
cohen.d(df$male)
cohens_d <- function(x, y) {
lx <- length(x)- 1
ly <- length(y)- 1
md  <- abs(mean(x) - mean(y))        ## mean difference (numerator)
csd <- lx * var(x) + ly * var(y)
csd <- csd/(lx + ly)
csd <- sqrt(csd)                     ## common sd computation
cd  <- md/csd                        ## cohen's d
}
cohens_d(df$male, df$female)
cohens_d <- function(x, y) {
lx <- length(x)- 1
ly <- length(y)- 1
md  <- abs(mean(x) - mean(y))        ## mean difference (numerator)
csd <- lx * var(x) + ly * var(y)
csd <- csd/(lx + ly)
csd <- sqrt(csd)                     ## common sd computation
cd  <- md/csd                        ## cohen's d
return(cd)
}
<- cohens_d(df$male, df$female)
result <- cohens_d(df$male, df$female)
result
control <- c(0,1,0,3,1,2,4,2)
day_1 <- c(1,3,2,2,4,6,3,4)
day_2 <- c(5,4,7,8,6,3,2,5)
day_3 <- c(7,1,6,9,10,12,8,7)
df <- data.frame(control,day_1, day_2, day_3)
df
shapiro.test(df)
shapiro.test(df$control)
shapiro.test(df$day_1)
shapiro.test(df$day_2)
shapiro.test(df$day_3)
library(car)
leveneTest
leveneTest(df$control~df$day_3)
leveneTest(df$control~df$day_1)
leveneTest(df$day_1~df$day_3)
class(df$control)
class(df$day_1)
levene.test(df$control, df$day_1)
leveneTest(df$day_1,df$day_3)
leveneTest(df$control, df$day_1)
leveneTest(df$day_1, df$day_2)
leveneTest(df$day_2, df$day_3)
leveneTest(df$day_1, df$day_3)
leveneTest(df$day_2, df$day_3)
leveneTest(df$control, df$day_3)
y <- c(df$day_1, df$day_2, df$day_3)
y <- c(df$day_1, df$day_2, df$day_3)
group <- as.factor(c(rep(1, length(df$day_1)),
rep(2, length(df$day_2)),
rep(3, length(df$day_3))))
leveneTest(y, group)
cancer
names(cancer)
group
y
t.test(df$control, df$day_3, var.equal=T, conf.level = 0.95)
young <- c(129, 86, 26)
old <- c(159, 40, 8)
table(young)
role <- c("main", "support", "back")
age <- c("child", "old")
table(young, age)
table(young)
role <- c("main", "support", "back")
age <- c("child", "old")
table(role)
R.andom.team <- function(fileName, leaders, times=1) {
# @Hyunji Song 2019
# Assigns teams randomly from attendance file.
#
# Args:
#   fileName: file must be '.xls' or '.xlsx' format and below working directory
#   leaders : vector of leaders' name for assigning teams
#   times : How many times the teams will be shuffled?
#
# Returns:
#   Data frame of team randomly assigned
library(readxl)
# Get filePath
wd_path <- getwd()
filePath <- paste(wd_path,"/", fileName, sep="")
tryCatch(raw_df <- read_excel(filePath, na="", skip=11, col_names=FALSE),
error=function(e) print("파일이 작업 폴더 안에 있는지, 또는 확장자를 확인해주세요."),
warning=function(w) print("warning! warning!"),
finully=NULL)
# Indexing
df <- raw_df[, c(4,6,7)]
df <- na.omit(df)
# Rename columns
colnames(df) <- c("major", "id", "name")
print(df)
# Devide groups into two groups(leaders, mates)
l_df <- df[df$name %in% leaders, ]
m_df <- df[!df$name %in% leaders, ]
# Assign team numbers to leaders
team_num <- seq(1,length(leaders))
l_df["team"] <- team_num
# Random shuffle mates
for(n in seq(times)){
m_df <- m_df[sample(nrow(m_df)), ]
}
# Assign team numbers to mates
rep_num <- rep(team_num, (round(nrow(m_df)/length(team_num)))+1)
m_df["team"] <- rep_num[1:nrow(m_df)]
# Row bind leaders_group and mates_group
rand_teams <- rbind(l_df, m_df)
########## Show result ##########
require(dplyr)
# Slicing id : 2014047538 -> 14
rand_teams["id"]<- unlist(mutate( (floor(rand_teams["id"]/1e+06)) %% 2000 ))
# Change string to integer
tmp <- rand_teams
tmp$major[!(tmp$major=="광고홍보학과")] <- 1
tmp$major[tmp$major=="광고홍보학과"] <- 0
tmp$major <- as.numeric(tmp$major)
# Show team result
rand_teams <- rand_teams[order(rand_teams$team),]
print("랜덤 팀")
for( i in team_num){
print(filter(rand_teams, team==i))
}
# Mean of id by team
print("팀별 평균 학번")
print(aggregate(rand_teams["id"], by=rand_teams["team"], mean ))
# Other majors in each team
print("팀별 타과생 수")
print(aggregate(tmp["major"], by=tmp["team"], sum))
return(rand_teams)
}
leaders <- c("윤준범","송현지", "주준태")
R.andom.team("R_study/students.xls",leaders)
R.andom.team("students.xls",leaders)
R.andom.team <- function(fileName, leaders, times=1) {
# @Hyunji Song 2019
# Assigns teams randomly from attendance file.
#
# Args:
#   fileName: file must be '.xls' or '.xlsx' format and below working directory
#   leaders : vector of leaders' name for assigning teams
#   times : How many times the teams will be shuffled?
#
# Returns:
#   Data frame of team randomly assigned
library(readxl)
# Get filePath
wd_path <- getwd()
filePath <- paste(wd_path,"/", fileName, sep="")
tryCatch(raw_df <- read_excel(filePath, na="", skip=11, col_names=FALSE),
error=function(e) print("파일이 작업 폴더 안에 있는지, 또는 확장자를 확인해주세요."),
warning=function(w) print("warning! warning!"),
finully=NULL)
# Indexing
df <- raw_df[, c(4,6,7)]
df <- na.omit(df)
# Rename columns
colnames(df) <- c("major", "id", "name")
print(df)
# Devide groups into two groups(leaders, mates)
l_df <- df[df$name %in% leaders, ]
m_df <- df[!df$name %in% leaders, ]
# Assign team numbers to leaders
team_num <- seq(1,length(leaders))
l_df["team"] <- team_num
# Random shuffle mates
for(n in seq(times)){
m_df <- m_df[sample(nrow(m_df)), ]
}
# Assign team numbers to mates
rep_num <- rep(team_num, (round(nrow(m_df)/length(team_num)))+1)
m_df["team"] <- rep_num[1:nrow(m_df)]
# Row bind leaders_group and mates_group
rand_teams <- rbind(l_df, m_df)
########## Show result ##########
require(dplyr)
# Slicing id : 2014047538 -> 14
rand_teams["id"]<- unlist(mutate( (floor(rand_teams["id"]/1e+06)) %% 2000 ))
# Change string to integer
tmp <- rand_teams
tmp$major[!(tmp$major=="광고홍보학과")] <- 1
tmp$major[tmp$major=="광고홍보학과"] <- 0
tmp$major <- as.numeric(tmp$major)
# Show team result
rand_teams <- rand_teams[order(rand_teams$team),]
print("랜덤 팀")
for( i in team_num){
print(filter(rand_teams, team==i))
}
# Mean of id by team
print("팀별 평균 학번")
print(aggregate(rand_teams["id"], by=rand_teams["team"], mean ))
# Other majors in each team
print("팀별 타과생 수")
print(aggregate(tmp["major"], by=tmp["team"], sum))
return(rand_teams)
}
leaders <- c("윤준범","송현지", "주준태")
R.andom.team("students.xls",leaders)
leaders <- c("윤준범","송현지", "주준태")
R.andom.team("students.xls",leaders)
leaders <- c("윤준범","송현지", "주준태")
R.andom.team("students.xls",leaders)
state.x77
data(Duncan)
