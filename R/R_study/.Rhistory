text(
0,                   # X 좌표
0,              # Y 좌표
"Hello World", # 표시할 문자열
adj=c(1,0),
)
text(
0,                   # X 좌표
0,              # Y 좌표
"Hello World", # 표시할 문자열
adj=c(0.5,0),
)
draw_heart <- function(message) {
# propose your love with R
#
# Args:
#   Message : word of what you want to say
#   color : which color do you like?
dat<- data.frame(t=seq(0, 2*pi, by=0.1) )
xhrt <- function(t) 16*sin(t)^3
yhrt <- function(t) 12*cos(t)-5*cos(2*t)-2*cos(3*t)-cos(4*t)
dat$y=yhrt(dat$t)
dat$x=xhrt(dat$t)
with(dat, plot(x,y, type="l"))
with(dat, polygon(x,y, col="pink"))
text(0, 0, message, adj=c(0.5,0))
}
draw_heart("I Love You")
draw_heart <- function(message) {
# propose your love with R
#
# Args:
#   Message : word of what you want to say
#   color : which color do you like?
dat<- data.frame(t=seq(0, 2*pi, by=0.1) )
xhrt <- function(t) 16*sin(t)^3
yhrt <- function(t) 12*cos(t)-5*cos(2*t)-2*cos(3*t)-cos(4*t)
dat$y=yhrt(dat$t)
dat$x=xhrt(dat$t)
with(dat, plot(x,y, type="l"))
with(dat, polygon(x,y, col="pink"))
text(0, 0, message, adj=c(0.5,0), cex=1.5)
}
draw_heart("I Love You")
draw_heart <- function(message) {
# propose your love with R
#
# Args:
#   Message : word of what you want to say
#   color : which color do you like?
dat<- data.frame(t=seq(0, 2*pi, by=0.1) )
xhrt <- function(t) 16*sin(t)^3
yhrt <- function(t) 12*cos(t)-5*cos(2*t)-2*cos(3*t)-cos(4*t)
dat$y=yhrt(dat$t)
dat$x=xhrt(dat$t)
with(dat, plot(x,y, type="l"))
with(dat, polygon(x,y, col="pink"))
text(0, 0, message, adj=c(0.5,0), cex=2)
}
draw_heart("I Love You")
R.love.u <- function(message) {
# deliver your message with R
#
# Args:
#   Message : word of what you want to say
dat<- data.frame(t=seq(0, 2*pi, by=0.1) )
xhrt <- function(t) 16*sin(t)^3
yhrt <- function(t) 12*cos(t)-5*cos(2*t)-2*cos(3*t)-cos(4*t)
dat$y=yhrt(dat$t)
dat$x=xhrt(dat$t)
with(dat, plot(x,y, type="l"))
with(dat, polygon(x,y, col="pink"))
text(0, 0, message, adj=c(0.5,0), cex=2)
}
R.love.u <- function(message) {
# deliver your message with R
#
# Args:
#   Message : word of what you want to say
dat<- data.frame(t=seq(0, 2*pi, by=0.1) )
xhrt <- function(t) 16*sin(t)^3
yhrt <- function(t) 12*cos(t)-5*cos(2*t)-2*cos(3*t)-cos(4*t)
dat$y=yhrt(dat$t)
dat$x=xhrt(dat$t)
with(dat, plot(x,y, type="l"))
with(dat, polygon(x,y, col="pink"))
text(0, 0, message, adj=c(0.5,0), cex=2)
}
R.love.u("It's funny")
s <- "It's funny"
s
length(s)
length(s)
strsplit(s)
strsplit(s,"")
length(strsplit(s,""))
t <- strsplit(s,"")
t
length(t)
c(t)
length(c)
t <- unlist(strsplit(s,""))
length(t)
str_length <- funtion(string) {
t <- unlist(strsplit(string,""))
return(length(t))
}
str_length("안녕하세요. 반갑습니다. 저")
str_length <- funtion(string) {
t <- unlist(strsplit(string,""))
return(length(t))
}
str_length("안녕하세요. 반갑습니다. 저")
str_length("hello world")
str_length <- function(string) {
t <- unlist(strsplit(string,""))
return(length(t))
}
str_length("안녕하세요. 반갑습니다.")
str_length <- function(string) {
# count length of string
#
# Args:
#   string : string to be counted
s <- unlist(strsplit(string,""))
return(length(s))
}
str_length("안녕하세요. 반갑습니다.")
str_length("안녕하세요. 반갑습니다. 안녕하세요. 반갑습니다.")
R.love.u <- function(message) {
# deliver your message with R
#
# Args:
#   Message : word of what you want to say
dat<- data.frame(t=seq(0, 2*pi, by=0.1) )
xhrt <- function(t) 16*sin(t)^3
yhrt <- function(t) 12*cos(t)-5*cos(2*t)-2*cos(3*t)-cos(4*t)
dat$y=yhrt(dat$t)
dat$x=xhrt(dat$t)
with(dat, plot(x,y, type="l"))
with(dat, polygon(x,y, col="pink"))
text(0, 0, message, adj=c(0.5,0), cex=2)
}
R.love.u("안녕하세요. 반갑습니다. 안녕하세요. 반갑습니다.")
str_length("안녕하세요. 반갑습니다. 안녕하세요. 반갑습니다.")
R.love.u <- function(message) {
# deliver your message with R
#
# Args:
#   Message : word of what you want to say
dat<- data.frame(t=seq(0, 2*pi, by=0.1) )
xhrt <- function(t) 16*sin(t)^3
yhrt <- function(t) 12*cos(t)-5*cos(2*t)-2*cos(3*t)-cos(4*t)
dat$y=yhrt(dat$t)
dat$x=xhrt(dat$t)
with(dat, plot(x,y, type="l"))
with(dat, polygon(x,y, col="pink"))
text(0, 0, message, adj=c(0.5,0), cex=2)
}
R.love.u("안녕하세요. 반갑습니다. 안녕하세요. 반갑습.")
str_length("안녕하세요. 반갑습니다. 안녕하세요. .")
str_length("안녕하세요. 반갑습니다. 안녕하세요.")
R.love.u("안녕하세요. 반갑습니다. 안녕하세요.")
R.love.u <- function(message) {
# deliver your message with R
#
# Args:
#   Message : word of what you want to say
dat<- data.frame(t=seq(0, 2*pi, by=0.1) )
xhrt <- function(t) 16*sin(t)^3
yhrt <- function(t) 12*cos(t)-5*cos(2*t)-2*cos(3*t)-cos(4*t)
dat$y=yhrt(dat$t)
dat$x=xhrt(dat$t)
with(dat, plot(x,y, type="l"))
with(dat, polygon(x,y, col="pink"))
if (str_length(message) < 20) {
font_size <- 2.0
} else if(str_length(message) < 40) {
font_size <- 1.5
}
text(0, 0, message, adj=c(0.5,0), cex=font_size)
}
R.love.u("안녕하세요. 반갑습니다. 안녕하세요.")
R.love.u <- function(message) {
# deliver your message with R
#
# Args:
#   Message : word of what you want to say
dat<- data.frame(t=seq(0, 2*pi, by=0.1) )
xhrt <- function(t) 16*sin(t)^3
yhrt <- function(t) 12*cos(t)-5*cos(2*t)-2*cos(3*t)-cos(4*t)
dat$y=yhrt(dat$t)
dat$x=xhrt(dat$t)
with(dat, plot(x,y, type="l"))
with(dat, polygon(x,y, col="pink"))
if (str_length(message) < 20) {
font_size <- 2.0
} else if(str_length(message) < 40) {
font_size <- 1.5
} else {
font_size <- 1
}
text(0, 0, message, adj=c(0.5,0), cex=font_size)
}
R.love.u("안녕하세요. 반갑습니다. 안녕하세요. 안녕하세요. 반갑습니다. 안녕하세요.")
str_length("안녕하세요. 반갑습니다. 안녕하세요. 안녕하세요. 반갑습니다. 안녕하세요."")
str_length("안녕하세요. 반갑습니다. 안녕하세요. 안녕하세요. 반갑습니다. 안녕하세요.")
t<- str_length("안녕하세요. 반갑습니다. 안녕하세요. 안녕하세요. 반갑습니다. 안녕하세요.")
t
R.love.u("안녕하세요. 반갑습니다. 안녕하세요. 안녕하세요. 반갑습니다. 세요.")
str_len <- function(string) {
s <- unlist(strsplit(string,""))
return(length(s))
}
R.love.u <- function(message) {
# deliver your message with R
#
# Args:
#   Message : word of what you want to say
dat<- data.frame(t=seq(0, 2*pi, by=0.1) )
xhrt <- function(t) 16*sin(t)^3
yhrt <- function(t) 12*cos(t)-5*cos(2*t)-2*cos(3*t)-cos(4*t)
dat$y=yhrt(dat$t)
dat$x=xhrt(dat$t)
with(dat, plot(x,y, type="l"))
with(dat, polygon(x,y, col="pink"))
if (str_len(message) < 20) {
font_size <- 2.0
} else if(str_len(message) < 40) {
font_size <- 1.5
} else {
font_size <- 1
}
text(0, 0, message, adj=c(0.5,0), cex=font_size)
}
R.love.u("안녕하세요. 반갑습니다. 안녕하세요. 안녕하세요. 반갑습니다. 세요.")
R.love.u("안녕하세요. 반갑습니다. 안녕하세.")
str_len <- function(string) {
s <- unlist(strsplit(string,""))
return(length(s))
}
R.love.u <- function(message) {
# deliver your message with R
#
# Args:
#   Message : word of what you want to say
dat<- data.frame(t=seq(0, 2*pi, by=0.1) )
xhrt <- function(t) 16*sin(t)^3
yhrt <- function(t) 12*cos(t)-5*cos(2*t)-2*cos(3*t)-cos(4*t)
dat$y=yhrt(dat$t)
dat$x=xhrt(dat$t)
with(dat, plot(x,y, type="l"))
with(dat, polygon(x,y, col="pink"))
if (str_len(message) < 20) {
font_size <- 2.0
} else if(str_len(message) < 40) {
font_size <- 1.5
} else {
font_size <- 1
}
text(0, 0, message, adj=c(0.5,0), cex=font_size)
}
R.love.u("안녕하세요. 반갑습니다. 안녕하세.")
str_len <- function(string) {
s <- unlist(strsplit(string,""))
return(length(s))
}
R.love.u <- function(message) {
# deliver your message with R
#
# Args:
#   Message : word of what you want to say
dat<- data.frame(t=seq(0, 2*pi, by=0.1) )
xhrt <- function(t) 16*sin(t)^3
yhrt <- function(t) 12*cos(t)-5*cos(2*t)-2*cos(3*t)-cos(4*t)
dat$y=yhrt(dat$t)
dat$x=xhrt(dat$t)
with(dat, plot(x,y, type="l"))
with(dat, polygon(x,y, col="pink"))
if (str_len(message) < 20) {
font_size <- 2.0
} else if(str_len(message) < 40) {
font_size <- 1.5
} else {
font_size <- 1
}
text(0, 0, message, adj=c(0.5,0), cex=font_size)
}
str_len <- function(string) {
s <- unlist(strsplit(string,""))
return(length(s))
}
R.love.u <- function(message) {
# deliver your message with R
#
# Args:
#   Message : (String)word of what you want to say
dat<- data.frame(t=seq(0, 2*pi, by=0.1) )
xhrt <- function(t) 16*sin(t)^3
yhrt <- function(t) 12*cos(t)-5*cos(2*t)-2*cos(3*t)-cos(4*t)
dat$y=yhrt(dat$t)
dat$x=xhrt(dat$t)
with(dat, plot(x,y, type="l"))
with(dat, polygon(x,y, col="pink"))
if (str_len(message) < 20) {
font_size <- 2.0
} else if(str_len(message) < 40) {
font_size <- 1.5
} else {
font_size <- 1
}
text(0, 0, message, adj=c(0.5,0), cex=font_size)
}
R.love.u("Don't be afraid of R")
R.love.u("R Love You")
### 현재 상영중인 영화중 평점이 X 점 이상인 영화이름은?###
getwd()
setwd("C:/Users/user/Downloads")
getwd()
install.packages("rvest")
install.packages("R6")
library("rvest")
library("R6")
#영화 평점은?
#네이버 영화페이지 크롤링
url = "https://movie.naver.com/movie/running/current.nhn"
htxt <- read_html(url)
# html_nodes 함수를 사용하여 info_star에 해당하는 부분을 table 변수에 저장
table <- html_nodes(htxt,'.info_star')
# html_nodes 함수를 사용하여 star_t1에 해당하는 부분을 content 변수에 저장
content <- html_nodes(table, '.star_t1')
# html_node 함수를 사용하여 num 부분을 reviews 변수에 저장
reviews <- html_node(content, '.num')
# html_text 함수를 사용하여 reviews 부분을 score 변수에 저장
score <- html_text(reviews)
#영화 이름은?
# html_nodes 함수를 사용하여 lst_dsc에 해당하는 부분을 table2 변수에 저장
table2 <- html_nodes(htxt,'.lst_dsc')
# html_node 함수를 사용하여 a에 해당하는 부분을 content2 변수에 저장
content2 <- html_node(tablea, 'a')
# html_text 함수를 사용하여 reviews 부분을 title 변수에 저장
title <- html_text(contenta, 'a')
title
#함수설정
num <- c(1:77)
x <- numeric
movies <- function(x){
i <- 0
while (i <= 77){
i <- i+1
if (score[i] > x) {print(title[i])}
else {next}
print("입니다")
}
}
#예시: 평점 9점 넘는 영화가 뭐죠?
movies("9")
htxt <- read_html(url)
getwd()
# Assigns teams randomly from attendance file.
#
# Args:
#   fileName: file must be '.xls' or '.xlsx' format and below working directory
#   leaders : vector of leaders' name for assigning teams
#
# Returns:
#   Data frame of team randomly assigned
library(readxl)
# Get filePath
wd_path <- getwd()
filePath <- paste(wd_path,"/", fileName, sep="")
R.andom.team <- function(fileName, leaders) {
# Assigns teams randomly from attendance file.
#
# Args:
#   fileName: file must be '.xls' or '.xlsx' format and below working directory
#   leaders : vector of leaders' name for assigning teams
#
# Returns:
#   Data frame of team randomly assigned
library(readxl)
# Get filePath
wd_path <- getwd()
filePath <- paste(wd_path,"/", fileName, sep="")
# Error handling
tryCatch(raw_df <- read_excel(filePath, na="", skip=11, col_names=FALSE),
error=function(e) print("파일이 작업 폴더 안에 있는지, 또는 확장자를 확인해주세요."),
warning=function(w) print("warning! warning!"),
finully=NULL)
# Indexing data frame
df <- raw_df[, c(4,6,7)]
df <- na.omit(df)
# Rename columns
colnames(df) <- c("major", "id", "name")
print(df)
# Devide groups into two groups(leaders, mates)
l_df <- df[df$name %in% leaders, ]
m_df <- df[!df$name %in% leaders, ]
# Assign team numbers to leaders
team_num <- seq(1,length(leaders))
l_df["team"] <- team_num
# Random shuffle mates
m_df <- m_df[sample(nrow(m_df)), ]
# Assign team numbers to mates
rep_num <- rep(team_num, length(leaders))
m_df["team"] <- rep_num[1:nrow(m_df)]
# Row bind leaders_group and mates_group
rand_teams <- rbind(l_df, m_df)
# Show result ...
require(dplyr)
# Slicing student id : 2014047538 -> 14
rand_teams["id"]<- unlist(mutate( (floor(rand_teams["id"]/1e+06)) %% 2000 ))
# Change text to integer
tmp <- rand_teams
tmp$major[!(tmp$major=="광고홍보학과")] <- 1
tmp$major[tmp$major=="광고홍보학과"] <- 0
tmp$major <- as.numeric(tmp$major)
# Show data frame by team
rand_teams <- rand_teams[order(rand_teams$team),]
print("팀 배정 결과")
for( i in team_num){
print(filter(rand_teams, team==i))
}
# Mean of id by team
print("팀별 평균 학번")
print(aggregate(rand_teams["id"], by=rand_teams["team"], mean ))
# Other majors in each team
print("팀별 타과생 수")
print(aggregate(tmp["major"], by=tmp["team"], sum))
return(rand_teams)
}
R.andom.team("students.xls", ["곽종현", "송현지", "이주영", "정효선"])
R.andom.team("students.xls", c["곽종현", "송현지", "이주영", "정효선"])
R.andom.team <- function(fileName, leaders) {
# Assigns teams randomly from attendance file.
#
# Args:
#   fileName: file must be '.xls' or '.xlsx' format and below working directory
#   leaders : vector of leaders' name for assigning teams
#
# Returns:
#   Data frame of team randomly assigned
library(readxl)
# Get filePath
wd_path <- getwd()
filePath <- paste(wd_path,"/", fileName, sep="")
# Error handling
tryCatch(raw_df <- read_excel(filePath, na="", skip=11, col_names=FALSE),
error=function(e) print("파일이 작업 폴더 안에 있는지, 또는 확장자를 확인해주세요."),
warning=function(w) print("warning! warning!"),
finully=NULL)
# Indexing data frame
df <- raw_df[, c(4,6,7)]
df <- na.omit(df)
# Rename columns
colnames(df) <- c("major", "id", "name")
print(df)
# Devide groups into two groups(leaders, mates)
l_df <- df[df$name %in% leaders, ]
m_df <- df[!df$name %in% leaders, ]
# Assign team numbers to leaders
team_num <- seq(1,length(leaders))
l_df["team"] <- team_num
# Random shuffle mates
m_df <- m_df[sample(nrow(m_df)), ]
# Assign team numbers to mates
rep_num <- rep(team_num, length(leaders))
m_df["team"] <- rep_num[1:nrow(m_df)]
# Row bind leaders_group and mates_group
rand_teams <- rbind(l_df, m_df)
# Show result ...
require(dplyr)
# Slicing student id : 2014047538 -> 14
rand_teams["id"]<- unlist(mutate( (floor(rand_teams["id"]/1e+06)) %% 2000 ))
# Change text to integer
tmp <- rand_teams
tmp$major[!(tmp$major=="광고홍보학과")] <- 1
tmp$major[tmp$major=="광고홍보학과"] <- 0
tmp$major <- as.numeric(tmp$major)
# Show data frame by team
rand_teams <- rand_teams[order(rand_teams$team),]
print("팀 배정 결과")
for( i in team_num){
print(filter(rand_teams, team==i))
}
# Mean of id by team
print("팀별 평균 학번")
print(aggregate(rand_teams["id"], by=rand_teams["team"], mean ))
# Other majors in each team
print("팀별 타과생 수")
print(aggregate(tmp["major"], by=tmp["team"], sum))
return(rand_teams)
}
R.andom.team("students.xls", c["곽종현", "송현지", "이주영", "정효선"])
R.andom.team("students.xlsx", c["곽종현", "송현지", "이주영", "정효선"])
R.andom.team("R_study/students.xlsx", c["곽종현", "송현지", "이주영", "정효선"])
leaders <- c["곽종현", "송현지", "이주영", "정효선"]
R.andom.team("R_study/students.xlsx", leaders)
leaders <- c("곽종현", "송현지", "이주영", "정효선")
R.andom.team("R_study/students.xlsx", leaders)
R.andom.team("R_study/students.xlsx", leaders)
install.packages("COUNT")
install.packages("ggplot2")
data("freeny")
data(freeny)
names(freeny)
View(freeny)
freeny.head
freeny.head()
head(freeny)
setwd("C:\Users\guseo\data_analysis\R\R_study")
setwd("C:/Users/guseo/data_analysis/R/R_study")
