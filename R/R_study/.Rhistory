mean(x)
sd(x)
y = array(x, c(500,5))
y
xbar = apply(y, 1, mean)
xbar
hist(xbar)
mean(xbar)
sd(xbar)
mean(x)
sd(x)
x=seq(-3.5,3.5,length=200)
y=dnorm(x)
plot(x,y,
type="l",
lwd=1,
ylim=c(0,0.4),
col="#777777",
main="표준정규분포",
col.main="#7777ff",
xlab="",
ylab="",
las=1
)
plot(x,y,
type="l",
lwd=1,
ylim=c(0,0.4),
col="#777777",
main="표준정규분포",
#     col.main="#7777ff",
xlab="",
ylab="",
las=1
)
x=seq(-5.5,4.5,length=200)
y=dnorm(x)
plot(x,y,
type="l",
lwd=1,
ylim=c(0,0.4),
col="#777777",
main="정규분포",
#     col.main="#7777ff",
xlab="",
ylab="",
las=1
)
x <- seq(-3,3,length.out=100)
y <- dnorm(x)
plot(x, y,
main="quantile",
type='l',
las=1
)
plot(x, y,
main="quantile",
type='l',
las=1,
xlab="",
ylab="",
)
region.x <- x[1.37<x]
region.y <- y[1.37<x]
region.x <- c(region.x[1], region.x, tail(region.x, 1))
region.y <- c(0, region.y, 0)
polygon(region.x, region.y, density = 10) # 45도 각도
polygon(region.x, region.y, density = -1, col="red")
plot(x, y,
main="quantile",
type='l',
xlab="",
ylab="",
)
region.x <- x[1.37<x]
region.y <- y[1.37<x]
region.x <- c(region.x[1], region.x, tail(region.x, 1))
region.y <- c(0, region.y, 0)
polygon(region.x, region.y, density = 10) # 45도 각도
polygon(region.x, region.y, density = -1, col="red")
pnorm(2,0,1)
qnorm(0.05, 0, 1)
qnorm(0.03, 0, 1)
# Central limit theorem
floor : 버림
runifrom : r unifrom 난수, 균일 분포 생성
x = floor(runif(2500, 0, 10))
x
hist(x)
mean(x)
sd(x)
y = array(x, c(500,5))
y # 2500개의 정수를 크기가 5인 벡터(5개씩 묶어서) 500로 변환
# 크기가 5인 표본에서 표본평균을 구해 500개의 표본평균 생성
xbar = apply(y, 1, mean)
xbar
hist(xbar)
hist(x)
mean(x)
sd(x)
y = array(x, c(500,5))
y # 2500개의 정수를 크기가 5인 벡터(5개씩 묶어서) 500로 변환
# 크기가 5인 표본에서 표본평균을 구해 500개의 표본평균 생성
xbar = apply(y, 1, mean)
xbar
hist(xbar)
x <- stackloss$stack.loss
x
mean(x)
var(x) #분산
sd(x) #표준편차
quantile(x, c(0.1, 0.25, 0.5, 0.95))
fivenum(x) # min, Q1, Q2, Q3, max
summary(x) # fivenum에 평균값이 더 들어가 있는 것.
boxplot(x, range=0)
boxplot(x, range=1.5) #default 사분위구간은 1.5이다.
# 표본 상관계수
x <- faithful$eruptions
y <- faithful$waiting
plot(x, y)
cor(x, y)
x <- c(1, 0, -1, 0)
y <- c(0,1, 0, -1)
cor(x,y)
x <- seq(-3,3,length.out=100)
y <- dnorm(x)
plot(x, y,
main="quantile",
type='l',
xlab="",
ylab="",
)
region.x <- x[1.37<x]
region.y <- y[1.37<x]
region.x <- c(region.x[1], region.x, tail(region.x, 1))
region.y <- c(0, region.y, 0)
polygon(region.x, region.y, density = 10) # 45도 각도
polygon(region.x, region.y, density = -1, col="red")
polygon(region.x, region.y, density = -1, col="gray")
plot(x, y,
#     main="quantile",
type='l',
xlab="",
ylab="",
)
region.x <- x[1.37<x]
region.y <- y[1.37<x]
plot(x, y,
#     main="quantile",
type='l',
xlab="",
ylab="",
)
region.x <- x[1.96<x]
region.y <- y[1.96<x]
region.x <- c(region.x[1], region.x, tail(region.x, 1))
region.y <- c(0, region.y, 0)
polygon(region.x, region.y, density = 10) # 45도 각도
polygon(region.x, region.y, density = -1, col="gray")
plot(x, y,
#     main="quantile",
type='l',
xlab="",
ylab="",
)
region.y <- y[1.96<x]
region.x <- x[1.96<x]
region.x <- c(region.x[1], region.x, tail(region.x, 1))
region.y <- c(0, region.y, 0)
# polygon(region.x, region.y, density = 10) # 45도 각도
polygon(region.x, region.y, density = -1, col="gray")
x <- seq(-3,3,length.out=100)
y <- dnorm(x)
plot(x, y,
#     main="quantile",
type='l',
xlab="",
ylab="",
)
region.y <- y[1.96<x]
region.x <- x[1.96<x]
region.x <- c(region.x[1], region.x, tail(region.x, 1))
region.y <- c(0, region.y, 0)
# polygon(region.x, region.y, density = 10) # 45도 각도
polygon(region.x, region.y, density = -1, col="gray")
x <- seq(-3,3,length.out=100)
y <- dnorm(x)
plot(x, y,
#     main="quantile",
type='l',
xlab="",
ylab="",
)
region.x <- x[-1.96>x]
region.y <- y[-1.96>x]
region.x <- c(region.x[1], region.x, tail(region.x, 1))
region.y <- c(0, region.y, 0)
# polygon(region.x, region.y, density = 10) # 45도 각도
polygon(region.x, region.y, density = -1, col="gray")
plot(x, y,
#     main="quantile",
type='l',
xlab="",
ylab="",
)
region.x <- x[(-1.96>x) & (1.96<x)]
region.y <- y[(-1.96>x) & (1.96<x)]
region.x <- c(region.x[1], region.x, tail(region.x, 1))
region.y <- c(0, region.y, 0)
# polygon(region.x, region.y, density = 10) # 45도 각도
polygon(region.x, region.y, density = -1, col="gray")
region.x <- x[(-1.96>x)]
region.y <- y[(-1.96>x)]
region.x <- c(region.x[1], region.x, tail(region.x, 1))
region.y <- c(0, region.y, 0)
# polygon(region.x, region.y, density = 10) # 45도 각도
polygon(region.x, region.y, density = -1, col="gray")
region.x <- x[(-1.96>x)]
region.x2 <- x[1.96<x]
region.y <- y[(-1.96>x)]
region.y2 <- y[(1.96<x)]
region.x <- c(region.x[1], region.x, tail(region.x, 1))
region.y <- c(0, region.y, 0)
# polygon(region.x, region.y, density = 10) # 45도 각도
polygon(region.x, region.y, density = -1, col="gray")
region.x <- x[(-1.96>x)]
region.x2 <- x[1.96<x]
region.y <- y[(-1.96>x)]
region.y2 <- y[(1.96<x)]
region.x <- c(region.x[1], region.x, tail(region.x, 1))
region.x2 <- c(region.x2[1], region.x2, tail(region.x2, 1))
region.y <- c(0, region.y, 0)
# polygon(region.x, region.y, density = 10) # 45도 각도
polygon(region.x, region.y,
region.x2, region.y2,
density = -1, col="gray")
region.x <- x[(-1.96>x)]
region.y <- y[(-1.96>x)]
region.x <- c(region.x[1], region.x, tail(region.x, 1))
region.y <- c(0, region.y, 0)
# polygon(region.x, region.y, density = 10) # 45도 각도
polygon(region.x, region.y,
density = -1, col="gray")
region.x2 <- x[(1.96<x)]
region.y2 <- y[(1.96<x)]
region.x2 <- c(region.x2[1], region.x2, tail(region.x2, 1))
region.y2 <- c(0, region.y2, 0)
# polygon(region.x, region.y, density = 10) # 45도 각도
polygon(region.x, region.y,
density = -1, col="gray")
polygon(region.x2, region.y2,
density = -1, col="gray")
A <- c(79.98, 80.04, 80.02, 80.04, 80.03, 80.03, 80.04, 79.97,
80.05, 80.03, 80.02, 80.00, 80.02) ;A
length(A)
B <- c(80.02, 79.94, 79.98, 79.97, 79.97, 80.03, 79.95, 79.97);B
length(B)
# 두 모집단 모두 정규분포임을 가정
boxplot(A, B)
t.test(A, B, var.equal = T)
# df = n1 + n2 -2 = (n1-1) + (n2-1)
t.test(A, B) # unequal
x <- c(70, 80, 72, 76, 76, 76, 72, 78, 82, 64, 74, 92, 74, 68, 84)
y <- c(68, 72, 62, 70, 58, 66, 68, 52, 64, 72, 74, 60, 74, 72, 74)
length(x)
length(y)
t.test(x,y,paired = T, conf.level = 0.95)
# method2
d <- x-y
t.test(d)
############ 모비율 비교
prop.test (x=c(88,126), n=c(100,150))
############ 모비율 비교
prop.test (x=c(200,200), n=c(110,90)) #x에는 X, Y 두 모집단의 시행횟수, n은 성공횟수
# two-sample t-test 3가지 가정
# 독립성, 정규성, 등분상성
# 등분산성을 알려주려면 var.equal=T 옵션 설정
t.test(A, B, var.equal = T)
# df = n1 + n2 -2 = (n1-1) + (n2-1)
t.test(A, B) # unequal 이 default값.
length(A)
length(B)
length(x)
library(ggplot2)
ggplot(data.frame(x=c(0,10)), aes(x=x)) +
+   stat_function(fun=dchisq, args=list(df=1), colour="black", size=1.2) +
+   geom_text(x=0.6, y=1, label="df=1") +
+
+   stat_function(fun=dchisq, args=list(df=2), colour="blue", size=1.2) +
+   geom_text(x=0, y=0.55, label="df=2") +
+
+   stat_function(fun=dchisq, args=list(df=3), colour="red", size=1.2) +
+   geom_text(x=0.5, y=0.05, label="df=3") +
+
+   ggtitle("Chisq-Distribution")
ggplot(data.frame(x=c(0,10)), aes(x=x)) +
+   stat_function(fun=dchisq, args=list(df=1), colour="black", size=1.2) +
+   geom_text(x=0.6, y=1, label="df=1") +
+
+   stat_function(fun=dchisq, args=list(df=2), colour="blue", size=1.2) +
+   geom_text(x=0, y=0.55, label="df=2") +
+
+   stat_function(fun=dchisq, args=list(df=3), colour="red", size=1.2) +
+   geom_text(x=0.5, y=0.05, label="df=3") +
+
+   ggtitle("Chisq-Distribution")
ggplot(data.frame(x=c(0,10)), aes(x=x))
+   stat_function(fun=dchisq, args=list(df=1), colour="black", size=1.2) +
+   geom_text(x=0.6, y=1, label="df=1") +
+
+   stat_function(fun=dchisq, args=list(df=2), colour="blue", size=1.2) +
+   geom_text(x=0, y=0.55, label="df=2") +
+
+   stat_function(fun=dchisq, args=list(df=3), colour="red", size=1.2) +
+   geom_text(x=0.5, y=0.05, label="df=3") +
+
+   ggtitle("Chisq-Distribution")
+   stat_function(fun=dchisq, args=list(df=1), colour="black", size=1.2) +
+   geom_text(x=0.6, y=1, label="df=1") +
+
+   stat_function(fun=dchisq, args=list(df=2), colour="blue", size=1.2) +
+   geom_text(x=0, y=0.55, label="df=2") +
+
+   stat_function(fun=dchisq, args=list(df=3), colour="red", size=1.2) +
+   geom_text(x=0.5, y=0.05, label="df=3") +
+
+   ggtitle("Chisq-Distribution")
+   stat_function(fun=dchisq, args=list(df=1), colour="black", size=1.2) +
+   geom_text(x=0.6, y=1, label="df=1") +
+
+   stat_function(fun=dchisq, args=list(df=2), colour="blue", size=1.2) +
+   geom_text(x=0, y=0.55, label="df=2") +
+
+   stat_function(fun=dchisq, args=list(df=3), colour="red", size=1.2) +
+   geom_text(x=0.5, y=0.05, label="df=3") +
+
+   ggtitle("Chisq-Distribution")
ggplot(data.frame(x=c(0,10)), aes(x=x))
+   stat_function(fun=dchisq, args=list(df=1), colour="black", size=1.2)
library(ggplot2)
ggplot(data.frame(x=c(0,10)), aes(x=x)) +
stat_function(fun=dchisq, args=list(df=1), colour="black", size=1.2) +
geom_text(x=0.6, y=1, label="df=1") +
stat_function(fun=dchisq, args=list(df=2), colour="blue", size=1.2) +
geom_text(x=0, y=0.55, label="df=2") +
stat_function(fun=dchisq, args=list(df=3), colour="red", size=1.2) +
geom_text(x=0.5, y=0.05, label="df=3") +
ggtitle("Chisq-Distribution")
ggplot(data.frame(x=c(0,10)), aes(x=x)) +
stat_function(fun=dchisq, args=list(df=2), colour="black", size=1.2) +
geom_text(x=0.6, y=1, label="df=2") +
stat_function(fun=dchisq, args=list(df=10), colour="blue", size=1.2) +
geom_text(x=0, y=0.55, label="df=10") +
stat_function(fun=dchisq, args=list(df=20), colour="red", size=1.2) +
geom_text(x=0.5, y=0.05, label="df=10") +
ggtitle("Chisq-Distribution")
ggplot(data.frame(x=c(0,40)), aes(x=x)) +
stat_function(fun=dchisq, args=list(df=2), colour="black", size=1.2) +
geom_text(x=0.6, y=1, label="df=2") +
stat_function(fun=dchisq, args=list(df=10), colour="blue", size=1.2) +
geom_text(x=0, y=0.55, label="df=10") +
stat_function(fun=dchisq, args=list(df=20), colour="red", size=1.2) +
geom_text(x=0.5, y=0.05, label="df=10") +
ggtitle("Chisq-Distribution")
ggplot(data.frame(x=c(0,40)), aes(x=x)) +
stat_function(fun=dchisq, args=list(df=2), colour="black", size=1.2) +
geom_text(x=0.6, y=1, label="df=2") +
stat_function(fun=dchisq, args=list(df=10), colour="blue", size=1.2) +
geom_text(x=0, y=0.55, label="df=10") +
stat_function(fun=dchisq, args=list(df=20), colour="red", size=1.2) +
geom_text(x=0.5, y=0.05, label="df=20") +
ggtitle("Chisq-Distribution")
ggplot(data.frame(x=c(0,40)), aes(x=x)) +
stat_function(fun=dchisq, args=list(df=2), colour="black", size=1.2) +
geom_text(x=0.6, y=1, label="df=2") +
stat_function(fun=dchisq, args=list(df=10), colour="blue", size=1.2) +
geom_text(x=0, y=0.55, label="df=10") +
stat_function(fun=dchisq, args=list(df=20), colour="red", size=1.2) +
geom_text(x=0.5, y=0.05, label="df=20") +
ggtitle("Chisq-Distribution")
ggplot(data.frame(x=c(0,40)), aes(x=x)) +
stat_function(fun=dchisq, args=list(df=2), colour="black", size=1.2) +
geom_text(x=0.6, y=1, label="df=2") +
stat_function(fun=dchisq, args=list(df=10), colour="blue", size=1.2) +
geom_text(x=0, y=0.55, label="df=10") +
stat_function(fun=dchisq, args=list(df=20), colour="red", size=1.2) +
geom_text(x=0.5, y=0.05, label="df=20") +
ggtitle("Chisq-Distribution")
ggplot(data.frame(x=c(0,40)), aes(x=x)) +
stat_function(fun=dchisq, args=list(df=2), colour="black", size=1.2) +
+ geom_text(x=0.6, y=1, label="df=2") +
stat_function(fun=dchisq, args=list(df=10), colour="blue", size=1.2) +
geom_text(x=0, y=0.55, label="df=10") +
stat_function(fun=dchisq, args=list(df=20), colour="red", size=1.2) +
geom_text(x=0.5, y=0.05, label="df=20") +
ggtitle("Chisq-Distribution")
##############양적 자료##########
# 히스토그램
data()
hist(faithful$waiting)
# 파이 촤트
x <- c(1520, 770, 510)
# digits : 소수점 1자리까지 나타낼
y <- round(x/sum(x)*100, digits = 1)
y
lab <- c("A", "B", "C")
w <- paste(lab, "(", y, "%",")")
pie(x, labels=w, main="파이촤트")
a <- rep("A", 20);a
b <- rep("B", 30)
c <- rep("C", 10)
# a : 20표, b : 30표, c : 10표
x <- c(a, b, c)
x
y <- as.matrix(table(x))
y
freq <- y[,1]
freq
relative_freq <- freq/sum(y)
relative_freq
z <- cbind(freq, relative_freq)
z
x <- stackloss$stack.loss
x
mean(x)
var(x) #분산
sd(x) #표준편차
quantile(x, c(0.1, 0.25, 0.5, 0.95))
fivenum(x) # min, Q1, Q2, Q3, max
summary(x) # fivenum에 평균값이 더 들어가 있는 것.
boxplot(x, range=0)
boxplot(x, range=1.5) #default 사분위구간은 1.5이다.
# 표본 상관계수
x <- faithful$eruptions
y <- faithful$waiting
plot(x, y)
cor(x, y)
x <- c(1, 0, -1, 0)
y <- c(0,1, 0, -1)
cor(x,y)
pnorm(2, 0, 1)
qnorm(0.05, 0,1)
# Central limit theorem
floor : 버림
runifrom : r unifrom 난수, 균일 분포 생성
x = floor(runif(2500, 0, 10))
x
hist(x)
mean(x)
sd(x)
y = array(x, c(500,5))
y # 2500개의 정수를 크기가 5인 벡터(5개씩 묶어서) 500로 변환
# 크기가 5인 표본에서 표본평균을 구해 500개의 표본평균 생성
xbar = apply(y, 1, mean)
xbar
hist(xbar)
mean(xbar)
sd(xbar)
plot(x,y,
type="l",
lwd=1,
ylim=c(0,0.4),
col="#777777",
main="정규분포",
#     col.main="#7777ff",
xlab="",
ylab="",
las=1
)
x <- seq(-3,3,length.out=100)
brand <- rep(c("domino", "hut"))
library(nortest)
hist()
#정규성을 볼 때 가장 좋은 라이브러리 : qqplot
shapiro.test(pizza$de) # 샘플 사이즈가 50개 이하면 샤피로, 그 이상이면 스미노프 테스트(lillie.test())
# 등분산 검증
library(car) #levenetest 함수 o
levene.test()
# effect size 계산하기
# install.packages("effsize")
library(effsize) # null 가설이 받는 비판에 대한 대안 # 변인 중 effsize가 더 큰 것
cohen.d # p-value가 낮아도, effcize 가 크면 sample size를 늘려서 다시 통계 내본다.
library(car)
grubbs.test() #outlier 측정 가능
x=seq(-5.5,4.5,length=200)
y=dnorm(x)
plot(x,y,
type="l",
lwd=1,
ylim=c(0,0.4),
col="#777777",
main="정규분포",
#     col.main="#7777ff",
xlab="",
ylab="",
las=1
)
x <- seq(-3,3,length.out=100)
p <- df %>%
plot_mapbox(lat = ~reclat, lon = ~reclong,
split = ~class, size=2,
mode = 'scattermapbox', hoverinfo='name') %>%
layout(title = 'Meteorites by Class',
font = list(color='white'),
plot_bgcolor = '#191A1A', paper_bgcolor = '#191A1A',
mapbox = list(style = 'dark'),
legend = list(orientation = 'h',
font = list(size = 8)),
margin = list(l = 25, r = 25,
b = 25, t = 25,
pad = 2))
ggplotly(p)
