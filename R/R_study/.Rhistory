l_df <- df[df$name %in% leaders, ]
m_df <- df[!df$name %in% leaders, ]
# Assign team numbers to leaders
team_num <- seq(1,length(leaders))
l_df["team"] <- team_num
# Random shuffle mates
m_df <- m_df[sample(nrow(m_df)), ]
# Assign team numbers to mates
rep_num <- rep(team_num, length(leaders))
m_df["team"] <- rep_num[1:nrow(m_df)]
# Row bind leaders_group and mates_group
rand_teams <- rbind(l_df, m_df)
# Show result ...
require(dplyr)
# Slicing student id : 2014047538 -> 14
rand_teams["id"]<- unlist(mutate( (floor(rand_teams["id"]/1e+06)) %% 2000 ))
# Change text to integer
tmp <- rand_teams
tmp$major[!(tmp$major=="광고홍보학과")] <- 1
tmp$major[tmp$major=="광고홍보학과"] <- 0
tmp$major <- as.numeric(tmp$major)
# Show data frame by team
rand_teams <- rand_teams[order(rand_teams$team),]
print("팀 배정 결과")
for( i in team_num){
print(filter(rand_teams, team==i))
}
# Mean of id by team
print("팀별 평균 학번")
print(aggregate(rand_teams["id"], by=rand_teams["team"], mean ))
# Other majors in each team
print("팀별 타과생 수")
print(aggregate(tmp["major"], by=tmp["team"], sum))
return(rand_teams)
}
R.andom.team("students.xls", c["곽종현", "송현지", "이주영", "정효선"])
R.andom.team("students.xlsx", c["곽종현", "송현지", "이주영", "정효선"])
R.andom.team("R_study/students.xlsx", c["곽종현", "송현지", "이주영", "정효선"])
leaders <- c["곽종현", "송현지", "이주영", "정효선"]
R.andom.team("R_study/students.xlsx", leaders)
leaders <- c("곽종현", "송현지", "이주영", "정효선")
R.andom.team("R_study/students.xlsx", leaders)
R.andom.team("R_study/students.xlsx", leaders)
install.packages("COUNT")
install.packages("ggplot2")
data("freeny")
data(freeny)
names(freeny)
View(freeny)
freeny.head
freeny.head()
head(freeny)
library(tidyverse)
library(plotly)
library(gapminder)
packageVersion('plotly')
##############################
df <- data.frame(
x = c(1,2,1),
y = c(1,2,1),
f = c(1,2,3)
)
p <- df %>%
plot_ly(
x = ~x,
y = ~y,
frame = ~f,
type = 'scatter',
mode = 'markers',
showlegend = F
)
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = api_create(p, filename="animations-basic")
chart_link
getwd()
setwd("C:/Users/guseo/data_analysis/R/R_study")
##############################
df <- data.frame(
x = c(1,2,1),
y = c(1,2,1),
f = c(1,2,3)
)
p <- df %>%
plot_ly(
x = ~x,
y = ~y,
frame = ~f,
type = 'scatter',
mode = 'markers',
showlegend = F
)
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = api_create(p, filename="animations-basic")
chart_link
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link <- api_create(p, filename="animations-basic")
chart_link
getwd()
library(plotly)
p <- plot_ly(midwest, x = ~percollege, color = ~state, type = "box")
api_create(p, filename = "r-docs-midwest-boxplots")
##############################
df <- data.frame(
x = c(1,2,1),
y = c(1,2,1),
f = c(1,2,3)
)
p <- df %>%
plot_ly(
x = ~x,
y = ~y,
frame = ~f,
type = 'scatter',
mode = 'markers',
showlegend = F
)
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link <- api_create(p, filename="animations-basic")
chart_link
p <- gapminder %>%
plot_ly(
x = ~gdpPercap,
y = ~lifeExp,
size = ~pop,
color = ~continent,
frame = ~year,
text = ~country,
hoverinfo = "text",
type = 'scatter',
mode = 'markers'
) %>%
layout(
xaxis = list(
type = "log"
)
)
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = api_create(p, filename="animations-mulitple-trace")
chart_link
p <- gapminder %>%
plot_ly(
x = ~gdpPercap,
y = ~lifeExp,
size = ~pop,
color = ~continent,
frame = ~year,
text = ~country,
hoverinfo = "text",
type = 'scatter',
mode = 'markers'
) %>%
layout(
xaxis = list(
type = "log"
)
)
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = api_create(p, filename="animations-mulitple-trace")
chart_link
library(tidyverse)
library(plotly)
library(gapminder)
packageVersion('plotly')
p <- gapminder %>%
plot_ly(
x = ~gdpPercap,
y = ~lifeExp,
size = ~pop,
color = ~continent,
frame = ~year,
text = ~country,
hoverinfo = "text",
type = 'scatter',
mode = 'markers'
) %>%
layout(
xaxis = list(
type = "log"
)
)
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = api_create(p, filename="animations-mulitple-trace")
chart_link
df <- read.csv2('dataset/chicken.csv')
df <- read.csv2('./dataset/chicken.csv')
df <- read.csv2('./dataset/chicken.csv', headers=TRUE)
df <- read.csv('./dataset/chicken.csv', headers=TRUE)
df <- read.csv('/dataset/chicken.csv', headers=TRUE)
df <- read.csv('dataset/chicken.csv', headers=TRUE)
getwd()
df <- read.csv('dataset/chicken.csv', headers=TRUE, sep=',')
df <- read.csv('dataset/chicken.csv', header=TRUE, sep=',')
df <- read.csv('dataset/chicken.csv', header=TRUE, sep=',')
df <- read.csv2('dataset/chicken.csv', header=TRUE, sep=',')
df <- read.csv2('dataset/chicken.csv', header=TRUE, sep=',', fileEncoding = 'utf-8')
df <- read.csv2('dataset/chicken.csv', header=TRUE, sep=',', fileEncoding = 'euc-kr' )
df <- read.csv2('dataset/chicken.csv', header=TRUE, sep=',', fileEncoding = 'euc-kr', encoding = 'utf-8' )
df <- read.csv2('dataset/chicken.csv',
header=TRUE,
sep=',',
fileEncoding='euc-kr',
encoding='utf-8' )
View(df)
df <- read.csv2('dataset/chicken.csv',
stringsAsFactors=T,
fileEncoding='CP949',
encoding='utf-8' )
View(df)
df <- read.csv2('dataset/chicken.csv',
stringsAsFactors=T,
fileEncoding='CP949',
encoding='utf-8',
skipNul = T,)
View(df)
library(readAny)
df <- read.any('dataset/chicken.csv', header=T)
View(df)
df <- read.any('dataset/chicken.csv',
stringsAsFactors=T,
fileEncoding='CP949',
encoding='utf-8',
skipNul = T,)
df <- read.any('dataset/chicken.csv',
stringsAsFactors=T,
encoding='utf-8',
skipNul = T,)
df <- read.any('dataset/chicken.csv',
stringsAsFactors=T,
encoding='utf-8',
skipNul = T)
df <- read.any('dataset/chicken.csv',
stringsAsFactors=T,
encoding='utf-8',
skipNul = T)
df <- read.any('dataset/chicken.csv',
stringsAsFactors=T,
skipNul = T)
df <- read.any('dataset/chicken.csv')
df <- read.any('dataset/chicken.csv')
View(df)
df <- read.csv2('dataset/chicken.csv', header=T)
df
View(df)
df <- read.csv2('dataset/chicken.csv', header=T)
df <- read.csv2('dataset/chicken.csv', header=T)
df
View(df)
df <- read.csv2('dataset/chicken.csv', header=T, na.strings = "NIL")
View(df)
df <- read.csv2('dataset/chicken.csv',
na.strings = "NIL")
df <- read.any('dataset/chicken.csv')
df <- read.csv2('dataset/chicken.csv',
fileEncoding = 'CPC949',
encoding = 'utf-8',
na.strings = "NIL")
df <- read.csv2('dataset/ex_chicken.csv',
fileEncoding = 'CPC949',
encoding = 'utf-8',
na.strings = "NIL")
df <- read.csv2('dataset/ex_chicken.csv',
encoding = 'utf-8',
na.strings = "NIL")
df <- read.csv2('dataset/ex_chicken.csv',
na.strings = "NIL")
df <- read.csv2('dataset/ex_chicken.csv')
df <- read.csv2('dataset/ex_chicken.csv')
df <- read.csv2('dataset/ex_chicken.csv')
df
df <- read.csv2('dataset/ex_chicken.csv',
fileEncoding = 'CPC949',
na.strings = 'NIL')
df <- read.csv2('dataset/ex_chicken.csv',
'rt',
fileEncoding = 'CPC949',
na.strings = 'NIL')
df <- read.csv2('dataset/ex_chicken.csv',
'rt',
fileEncoding = 'CPC949',
encoding = 'utf-8'
na.strings = 'NIL')
df <- read.csv2('dataset/ex_chicken.csv',
'rt',
fileEncoding = 'CPC949',
encoding = 'utf-8',
na.strings = 'NIL')
df <- read.csv2('dataset/ex_chicken.csv',
'rt',
encoding = 'utf-8',
na.strings = 'NIL')
df <- read.csv2('dataset/ex_chicken.csv',
header = T,
'rt',
encoding = 'utf-8',
na.strings = 'NIL')
df <- read.csv2('dataset/ex_chicken.csv',
header = T,
sep = ',',
encoding = 'utf-8',
na.strings = 'NIL')
df <- read.csv2('dataset/ex_chicken.csv',
header = T,
sep = ',',
encoding = 'utf-8',
na.strings = c('NIL'))
df <- read.csv2('dataset/ex_chicken.csv',
na.strings = c('NIL'))
df <- read.csv2('dataset/ex_chicken.csv', na.strings = c('NIL'))
df <- read.csv('dataset/ex_chicken.csv', na.strings = c('NIL'))
df <- read.csv('dataset/ex_chicken.csv',
fileEncoding = 'euc-kr'
na.strings = c('NIL'))
df <- read.csv('dataset/ex_chicken.csv',
fileEncoding = 'euc-kr',
na.strings = c('NIL'))
df <- read.csv('dataset/ex_chicken.csv',
fileEncoding = 'euc-kr',
na.strings = c('NIL'))
df <- read.csv('dataset/ex_chicken.csv',
header=T,
fileEncoding = 'euc-kr',
na.strings = c('NIL'))
df <- read.csv('dataset/ex_chicken.csv',
header=T,
fileEncoding = 'euc-kr',
na.strings = c('NIL'))
df <- read.csv('dataset/ex_chicken.csv',
header=T,
fileEncoding = 'euc-kr')
df <- read.csv('dataset/ex_chicken.csv',
header=T,
sep=',',
fileEncoding = 'euc-kr')
df <- read.csv('dataset/ex_chicken.csv',
header=T,
sep=',',
fileEncoding = 'euc-kr')
df <- read.csv('dataset/ex_chicken.csv',
header=T,
sep=',',
fill=T,
fileEncoding = 'euc-kr')
df <- read.csv('dataset/ex_chicken.csv',
header=T,
sep=',',
fill=T,
fileEncoding = 'euc-kr')
df <- read.csv('dataset/ex_chicken.csv',
header=T,
sep=',',
fill=T,
fileEncoding = 'euc-kr',
encoding = 'utf-8')
View(df)
df <- read.csv('dataset/chicken.csv',
header=T,
sep=',',
fill=T,
fileEncoding = 'euc-kr',
encoding = 'utf-8')
df <- read.csv('dataset/chicken.csv',
header=T,
sep=',',
fill=T,
fileEncoding = 'euc-kr',
encoding = 'utf-8')
View(df)
df <- read.csv('dataset/chicken.csv',
header=T,
sep=' ',
fill=T,
fileEncoding = 'euc-kr',
encoding = 'utf-8')
df
View(df)
df <- read.csv('dataset/chicken.csv',
header=T,
sep=' ',
fill=T,
fileEncoding = 'euc-kr',
encoding = 'utf-8')
View(df)
df <- read.csv('dataset/chicken.csv',
header=T,
fill=T,
fileEncoding = 'euc-kr',
encoding = 'utf-8')
View(df)
library(tidyverse)
library(plotly)
library(gapminder)
df <- read.csv('dataset/chicken.csv',
header=T,
fill=T,
fileEncoding = 'euc-kr',
encoding = 'utf-8')
df <- read.csv('dataset/chicken.csv',
header=T,
fileEncoding = 'euc-kr',
encoding = 'utf-8')
View(df)
names(df)
head(df)
##############################
gapminder
names(df)
summarise(df)
df['기준일']
# 기준일 -> 연 / 월 / 일
# 성별 -> 여 = 0, 남 = 1
# 요일 -> 월 = 1, 일 = 7
as.character.Date(df['기준일'])
df['기준일']
names(df)
colnames(df)
df['시군']
df['시군']
df['시군구']
colnames(df)
colnames(df) <- c("Date", "DayofWeek", "gender", "age", "city", 'gu','dong', 'category', 'calls')
colnames(df)
colnames(df) <- c("Date", "DayofWeek", "gender", "age", "si", 'gu','dong', 'category', 'calls')
colnames(df)
df <- read.csv('dataset/chicken.csv',
header=T,
fileEncoding = 'euc-kr',
encoding = 'utf-8')
colnames(df)
date <- as.Date(as.character(df$기준일), format = "%Y%m%d")
lt <- unclass(as.POSIXlt(date))
with(lt, data.frame(Date = date, year = year + 1900, month = mon + 1, day = mday))
head(df)
with(lt, data.frame(Date = date, year = year + 1900, month = mon + 1, day = mday))
df['기준일'], df['연'], df['월'], df['일']<- with(lt, data.frame(Date = date, year = year + 1900, month = mon + 1, day = mday))
lt <- unclass(as.POSIXlt(date))
with(lt, data.frame(Date = date, year = year + 1900, month = mon + 1, day = mday))
library(tidyverse)
library(plotly)
library(gapminder)
df <- read.csv('dataset/chicken.csv',
header=T,
fileEncoding = 'euc-kr',
encoding = 'utf-8')
# 기준일 -> 연 / 월 / 일
# 성별 -> 여 = 0, 남 = 1
# 요일 -> 월 = 1, 일 = 7
as.character.Date(df['기준일'])
date <- as.Date(as.character(df$기준일), format = "%Y%m%d")
lt <- unclass(as.POSIXlt(date))
with(lt, data.frame(Date = date, year = year + 1900, month = mon + 1, day = mday))
lt <- unclass(as.POSIXlt(date))
lt
with(lt, data.frame(Date = date, year = year + 1900, month = mon + 1, day = mday))
df$기준일 <- with(lt, data.frame(Date = date, year = year + 1900, month = mon + 1, day = mday))
####################이 위까지 함.
head(df)
date <- as.Date(as.character(df$기준일), format = "%Y%m%d")
lt <- unclass(as.POSIXlt(date))
df$기준일 <- with(lt, data.frame(날짜 = date, 연 = year + 1900, 월 = mon + 1, 일 = mday))
####################이 위까지 함.
head(df)
# 성별 -> 여 = 0, 남 = 1
tmp <- factor(df$성별)
# 성별 -> 여 = 0, 남 = 1
tmp <- factor(df$성별, c('남', '여'))
tmp
# 성별 -> 여 = 0, 남 = 1
gender <- factor(df$성별, levels=c('남', '여'))
levels(gender) <- c(1, 0)
gender
head(df)
# 성별 -> 여 = 0, 남 = 1
df$성별 <- factor(df$성별, levels=c('남', '여'))
levels(df$성별) <- c(1, 0)
head(df)
# 요일 -> 월 = 1, 일 = 7
df$요일 <- factor(df$요일, levels=c('월', '화', '수', '목', '금', '토', '일'))
levels(df$요일) <- c(1, 2, 3, 4, 5, 6, 7)
####################이 위까지 함.
head(df)
head(df)
View(df)
####################이 위까지 함.
names(df$연령대)
####################이 위까지 함.
df$연령대
p <- df %>%
plot_ly(
x = ~gdpPercap,
y = ~lifeExp,
size = ~pop,
color = ~continent,
frame = ~year,
text = ~country,
hoverinfo = "text",
type = 'scatter',
mode = 'markers'
) %>%
layout(
xaxis = list(
type = "log"
)
)
####################이 위까지 함.
head(df$연령대)
